You are given an array nums, where each number in the array appears either once or twice.

Return the bitwise XOR of all the numbers that appear twice in the array, or 0 if no number appears twice.

 

Example 1:

Input: nums = [1,2,1,3]

Output: 1

Explanation:

The only number that appears twice in nums is 1.

Example 2:

Input: nums = [1,2,3]

Output: 0

Explanation:

No number appears twice in nums.

Example 3:

Input: nums = [1,2,2,1]

Output: 3

Explanation:

Numbers 1 and 2 appeared twice. 1 XOR 2 == 3.

 

Constraints:

1 <= nums.length <= 50
1 <= nums[i] <= 50
Each number in nums appears either once or twice.



Intuition
Finding the duplicate number(s) in the input vector and doing XOR operations on them.

Approach
Initialize an integer variable res to 0 and a map called mp to store the frequency of each number in the array.
The for loop iterates through each element in nums and increments the count of that number in the map.
Another for loop iterates through the map entries. If the count of a number is 2 (indicating a duplicate), it performs an XOR operation with res.
Finally, the function returns the value of res.
Complexity
Time complexity: 0(n)
Space complexity: 0(n)
Code


class Solution {
public:
    int duplicateNumbersXOR(vector<int>& nums) {
        ios_base::sync_with_stdio(0);

        int res = 0; // Initialize the result variable
        map<int, int> mp; // Create a map to store the frequency of each number

        // Count the occurrences of each number in the input vector
        for (int num : nums)
            mp[num]++;

        // XOR operation to find the duplicate number
        for (auto num : mp)
            if (num.second == 2)
                res ^= num.first; // XOR with the duplicate number

        return res; // Return the duplicate number
    }
};
