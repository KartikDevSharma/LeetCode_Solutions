You are given an integer array nums, an integer array queries, and an integer x.

For each queries[i], you need to find the index of the queries[i]th occurrence of x in the nums array. If there are fewer than queries[i] occurrences of x, the answer should be -1 for that query.

Return an integer array answer containing the answers to all queries.

 

Example 1:

Input: nums = [1,3,1,7], queries = [1,3,2,4], x = 1

Output: [0,-1,2,-1]

Explanation:

For the 1st query, the first occurrence of 1 is at index 0.
For the 2nd query, there are only two occurrences of 1 in nums, so the answer is -1.
For the 3rd query, the second occurrence of 1 is at index 2.
For the 4th query, there are only two occurrences of 1 in nums, so the answer is -1.
Example 2:

Input: nums = [1,2,3], queries = [10], x = 5

Output: [-1]

Explanation:

For the 1st query, 5 doesn't exist in nums, so the answer is -1.
 

Constraints:

1 <= nums.length, queries.length <= 105
1 <= queries[i] <= 10^5
1 <= nums[i], x <= 10^4

Intuition
The goal is to find specific occurrences of an element x in an array nums based on the positions provided in the queries array. The problem requires checking the occurrence of x up to a certain position and returning the corresponding index or -1 if the occurrence does not exist.
Approach
Record Indices of Occurrences:
Traverse the nums array and record the indices where x appears.
Process Each Query:
For each query, check if the required occurrence exists in the recorded indices.
If it does, return the index.
If it doesn't, return -1.
Complexity
Time complexity: O(n+m), where n is the length of nums and m is the length of queries. This is because we traverse nums once to record the occurrences and then process each query in constant time.
Space complexity: O(n) in the worst case, for storing the indices of occurrences of x.


class Solution:
    def occurrencesOfElement(self, nums: List[int], queries: List[int], x: int) -> List[int]:
        occurrences = []
        for i, num in enumerate(nums):
            if num == x:
                occurrences.append(i)
                
        result = []
        for query in queries:
            if query <= len(occurrences):
                result.append(occurrences[query - 1])
            else:
                result.append(-1)
                
        return result