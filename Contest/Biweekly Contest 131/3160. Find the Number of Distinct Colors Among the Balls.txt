You are given an integer limit and a 2D array queries of size n x 2.

There are limit + 1 balls with distinct labels in the range [0, limit]. Initially, all balls are uncolored. For every query in queries that is of the form [x, y], you mark ball x with the color y. After each query, you need to find the number of distinct colors among the balls.

Return an array result of length n, where result[i] denotes the number of distinct colors after ith query.

Note that when answering a query, lack of a color will not be considered as a color.

 

Example 1:

Input: limit = 4, queries = [[1,4],[2,5],[1,3],[3,4]]

Output: [1,2,2,3]

Explanation:



After query 0, ball 1 has color 4.
After query 1, ball 1 has color 4, and ball 2 has color 5.
After query 2, ball 1 has color 3, and ball 2 has color 5.
After query 3, ball 1 has color 3, ball 2 has color 5, and ball 3 has color 4.
Example 2:

Input: limit = 4, queries = [[0,1],[1,2],[2,2],[3,4],[4,5]]

Output: [1,2,2,3,4]

Explanation:



After query 0, ball 0 has color 1.
After query 1, ball 0 has color 1, and ball 1 has color 2.
After query 2, ball 0 has color 1, and balls 1 and 2 have color 2.
After query 3, ball 0 has color 1, balls 1 and 2 have color 2, and ball 3 has color 4.
After query 4, ball 0 has color 1, balls 1 and 2 have color 2, ball 3 has color 4, and ball 4 has color 5.
 

Constraints:

1 <= limit <= 10^9
1 <= n == queries.length <= 10^5
queries[i].length == 2
0 <= queries[i][0] <= limit
1 <= queries[i][1] <= 10^9

Intuition
Track unique colors for each ball and append the count of unique colors after each query.

Approach
Explanation:
Initialization:

We initialize the ball dictionary with the first ball and its color from the first query.
We create the unique_colors dictionary with the first color and its count set to 1.
We initialize the ans list with the count of unique colors after the first query.
Main Loop:

We iterate through the queries list starting from the second query.
For each query, we extract the current ball and color.
Processing Queries:

If the current ball is not in the ball dictionary:
We increment the count of the current color in the unique_colors dictionary.
We update the ball dictionary with the current ball and color.
If the current ball is already in the ball dictionary:
We retrieve the previous color of the current ball.
If the previous color is different from the current color:
We decrement the count of the previous color in the unique_colors dictionary.
If the count of the previous color becomes 0, we remove it from the unique_colors dictionary.
We update the count of the current color in the unique_colors dictionary.
We update the ball dictionary with the current ball and color.
Appending Results:

After processing each query, we append the current count of unique colors to the ans list.
Complexity
Time complexity:
O(n) where n is length of queries.

Space complexity:
O(n) where n is length of queries.


class Solution:
    def queryResults(self, limit: int, queries: List[List[int]]) -> List[int]:
        ball = {queries[0][0]: queries[0][1]}  # initialising dict with the first ball and its color
        unique_colors = {queries[0][1]: 1}  # recording first color count in the dict
        ans = [1]

        # starting from second ball 
        for curr_ball, curr_color in queries[1:]:
            # if current ball not present in our dict
            if curr_ball not in ball:
                # checking if curr_color is present or not in our unique_colors dict, if not then it will be 0+1 due to get() method, else we will add 1 to its count 
                unique_colors[curr_color] = unique_colors.get(curr_color, 0) + 1 
                ball[curr_ball] = curr_color # giving color to new ball
            
            # if ball is already present 
            else:
                # noting down the previour color of the ball
                prev_color = ball[curr_ball]
                # if previous and current color are different we decrease the count of previous color
                if prev_color != curr_color:
                    # decreasing the count of previous color in our unique_colors dict
                    unique_colors[prev_color] -= 1
                    # if the count has become 0 for previous color, means it only occured once i.e. for our current ball
                    if unique_colors[prev_color] == 0:
                        # deletig current ball's previous color
                        del unique_colors[prev_color]
                    # adding current color count to dict using same get() method.
                    unique_colors[curr_color] = unique_colors.get(curr_color, 0) + 1
                # changing the ball color finally
                ball[curr_ball] = curr_color
            
            ans.append(len(unique_colors)) # length of our unique_colors dict will be equal to distinct colors till now
        
        return ans          