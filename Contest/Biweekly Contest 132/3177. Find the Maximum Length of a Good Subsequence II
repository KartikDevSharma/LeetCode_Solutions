from typing import List

class Solution:
    def maximumLength(self, nums: List[int], k: int) -> int:
        n = len(nums)
        dp = [[1] * (k + 1) for _ in range(n)]
        global_max = 1
        max_lengths = [-1] * (k + 1)
        value_to_length_map = [{} for _ in range(k + 1)]
        
        for i in range(n):
            for allowed_diff in range(k + 1):
                for prev_diff in range(allowed_diff):
                    dp[i][allowed_diff] = max(dp[i][allowed_diff], 1 + max_lengths[prev_diff])
                
                if nums[i] in value_to_length_map[allowed_diff]:
                    dp[i][allowed_diff] = max(dp[i][allowed_diff], 1 + value_to_length_map[allowed_diff][nums[i]])
                
                global_max = max(global_max, dp[i][allowed_diff])
            
            for allowed_diff in range(k + 1):
                max_lengths[allowed_diff] = max(max_lengths[allowed_diff], dp[i][allowed_diff])
                value_to_length_map[allowed_diff][nums[i]] = max(value_to_length_map[allowed_diff].get(nums[i], 0), dp[i][allowed_diff])
        
        return global_max
