You are given an array nums consisting of positive integers where all integers have the same number of digits.

The digit difference between two integers is the count of different digits that are in the same position in the two integers.

Return the sum of the digit differences between all pairs of integers in nums.

 

Example 1:

Input: nums = [13,23,12]

Output: 4

Explanation:
We have the following:
- The digit difference between 13 and 23 is 1.
- The digit difference between 13 and 12 is 1.
- The digit difference between 23 and 12 is 2.
So the total sum of digit differences between all pairs of integers is 1 + 1 + 2 = 4.

Example 2:

Input: nums = [10,10,10,10]

Output: 0

Explanation:
All the integers in the array are the same. So the total sum of digit differences between all pairs of integers will be 0.

 

Constraints:

2 <= nums.length <= 10^5
1 <= nums[i] < 10^9
All integers in nums have the same number of digits.



class Solution:
    def sumDigitDifferences(self, nums: List[int]) -> int:
        digits = len(str(nums[0]))
        n = len(nums)
        ans = 0
        
        for i in range(1, digits + 1):
            # hashmap to store number of occurances of the digit
            hm = dict()
            # Traversing 0th index to (n-1)th index to ensure we don't repeat pairs
            for j in range(n):
                # storing the jth value excluding the (i-1)th digits from right
                val = nums[j] // 10**(i-1)
                # val % 10 is digit of the ith digit from right
                
                if hm:
                    # To check the digits of the previous numbers 
                    for k in hm:
                        if k != val%10: # make sure we don't add same digits occurance
                            ans += (hm[k])
                # add the occurance of the digit to hashmap
                hm[val % 10] = hm.get(val % 10, 0) + 1
        return ans